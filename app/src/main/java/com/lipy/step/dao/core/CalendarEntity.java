package com.lipy.step.dao.core;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "Calendar".
 */
public class CalendarEntity {

    private Long id;
    /** Not-null value. */
    private String date;
    /** Not-null value. */
    private String title;
    private Long cardId;
    private int status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CalendarEntityDao myDao;

    private PedometerEntity pedometerEntity;
    private Long pedometerEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CalendarEntity() {
    }

    public CalendarEntity(Long id) {
        this.id = id;
    }

    public CalendarEntity(Long id, String date, String title, Long cardId, int status) {
        this.id = id;
        this.date = date;
        this.title = title;
        this.cardId = cardId;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCalendarEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(String date) {
        this.date = date;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public Long getCardId() {
        return cardId;
    }

    public void setCardId(Long cardId) {
        this.cardId = cardId;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    /** To-one relationship, resolved on first access. */
    public PedometerEntity getPedometerEntity() {
        Long __key = this.cardId;
        if (pedometerEntity__resolvedKey == null || !pedometerEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PedometerEntityDao targetDao = daoSession.getPedometerEntityDao();
            PedometerEntity pedometerEntityNew = targetDao.load(__key);
            synchronized (this) {
                pedometerEntity = pedometerEntityNew;
            	pedometerEntity__resolvedKey = __key;
            }
        }
        return pedometerEntity;
    }

    public void setPedometerEntity(PedometerEntity pedometerEntity) {
        synchronized (this) {
            this.pedometerEntity = pedometerEntity;
            cardId = pedometerEntity == null ? null : pedometerEntity.getId();
            pedometerEntity__resolvedKey = cardId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
